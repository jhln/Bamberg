theory Chap1_DataStructure
  imports 
    Main 
    "Deriving/Comparator_Generator/Compare_Order_Instances"
begin



section "residuated lattice terms"

datatype s =
    P int ("\<llangle>_\<rrangle>" 55)
    | Var nat ("\<guillemotleft>_\<guillemotright>" 55)
    | Meet s s (infixr "\<^bold>\<inter>\<^sub>s" 55)
    | Join s s (infixr "\<^bold>\<union>\<^sub>s" 55)
    | Prod s s (infixr "\<^bold>\<cdot>\<^sub>s" 55)
    | Impl s s (infixr "\<^bold>\<rightarrow>\<^sub>s" 55)
    | Zero ("\<^bold>0\<^sub>s")
    | One ("\<^bold>1\<^sub>s")
    | Bot ("\<^bold>\<bottom>\<^sub>s")
    | Top ("\<^bold>\<top>\<^sub>s")

thm "s.induct"
thm "s.rec"


(* derive lexicographic ordering for datatype definition by given package *)
derive compare_order s


value "P 8 \<le> P 8"
value "P 7 \<le> P 8"
value "P 8 \<le> P 7"
value "(P 8) \<^bold>\<inter>\<^sub>s (P 7) \<le> (P 8) \<^bold>\<inter>\<^sub>s (P 7)"
value "(P 9) \<^bold>\<inter>\<^sub>s (P 7) \<le> (P 8) \<^bold>\<inter>\<^sub>s (P 7)"
value "(P 9) \<^bold>\<inter>\<^sub>s (P 6) \<le> (P 8) \<^bold>\<inter>\<^sub>s (P 7)"
value "(P 8) \<^bold>\<inter>\<^sub>s ((P 8) \<^bold>\<inter>\<^sub>s (P 8)) \<le> ((P 8) \<^bold>\<inter>\<^sub>s (P 8)) \<^bold>\<inter>\<^sub>s (P 8)" (* = True *)
value "((P 8) \<^bold>\<inter>\<^sub>s (P 8)) \<^bold>\<inter>\<^sub>s (P 8) \<le> (P 8) \<^bold>\<inter>\<^sub>s ((P 8) \<^bold>\<inter>\<^sub>s (P 8))" (* = False *)
(* ... some tests for the directed rewriting by given laws *)

thm add_ac



section "OPTION 1: TestQuotient done by Isabelles  quotient package"


definition testRel :: "s \<Rightarrow> s \<Rightarrow> bool" where
"testRel a b \<equiv> \<forall> s1 s2 s3. 
(a = (Prod (Prod s1 s2) s3) \<and> b = (Prod s1 (Prod s2 s3)))"


inductive testRelClosure :: "s \<Rightarrow> s \<Rightarrow> bool" where
intro: "\<And> s1 s2. testRel s1 s2 \<Longrightarrow> testRelClosure  s1 s2" |
refl: "\<And> s. testRelClosure s s" |
symm: "\<And> s1 s2. testRelClosure s1 s2 \<Longrightarrow> testRelClosure s2 s1" |
trans: "\<And> s1 s2 s3. testRelClosure s1 s2 \<Longrightarrow> testRelClosure s2 s3 \<Longrightarrow> testRelClosure s1 s3"
(*refll: "\<And> s1 s2. testRelClosure s1 s2 \<Longrightarrow> testRelClosure  s1 s1" |
reflr: "\<And> s1 s2. testRelClosure s1 s2 \<Longrightarrow> testRelClosure  s2 s2" |*)



thm "testRelClosure.refl"


quotient_type TestQuot = "s" / "testRelClosure"
  morphisms Rep_S Abs_S
proof (rule equivpI)
  show "reflp testRelClosure" unfolding reflp_def using testRelClosure.refl by simp
  show "symp testRelClosure" unfolding symp_def using testRelClosure.symm by simp
  show "transp testRelClosure" unfolding transp_def using testRelClosure.trans by blast
qed

(* what is the generated "Collect" in here ? *)
thm "TestQuot_equivp"
thm "TestQuot.Abs_TestQuot_cases"
thm "TestQuot.abs_eq_iff"
thm "TestQuot.Rep_TestQuot_cases"
thm "TestQuot.Rep_TestQuot_induct"
thm "Rep_TestQuot"



(* but these theorems are not usable or easily transferable for the "pure" HOL-style, right? *)




section "OPTION 2: Purer Quotient by Lattice Laws"

(*
function laws :: "s \<Rightarrow> s \<Rightarrow> bool" where
s_commu_mult: "laws (Prod s1a s1b) (Prod s2a s2b) = ((s1a = s2a) \<and> (s1b = s2b))" |
s_unitR_mult:  "laws (Prod s1a \<^bold>1\<^sub>s) s2 = (s1a = s2)" |
s_unitL_mult:  "laws (Prod \<^bold>1\<^sub>s s1a) s2 = (s1a = s2)"
proof -*)
(*definition laws :: "s \<Rightarrow> s \<Rightarrow> bool" where*)
(*"laws s1 s2 \<equiv> (case s1 of (Prod \<^bold>1\<^sub>s s1a) \<Rightarrow> s1a = s2)"*)
(*"laws s1 s2 \<equiv>
  \<forall> s1 s2 s3. carrierEQI (Prod (Prod s1 s2) s3) (Prod s1 (Prod s2 s3))"*)


subsection "encoding with a definition and the refl/sym/trans-closuse"

definition latticeLaws :: "s \<Rightarrow> s \<Rightarrow> bool" where
"latticeLaws a b \<equiv> \<forall> s1 s2 s3. 
(a = (Prod (Prod s1 s2) s3) \<and> b = (Prod s1 (Prod s2 s3))) \<or>
(a = (Prod s1 \<^bold>1\<^sub>s) \<and> b = s1)" (* ... only few laws here so far - tbc*)



thm "latticeLaws_def"

inductive closurePred :: "(s \<Rightarrow> s \<Rightarrow> bool) \<Rightarrow> s \<Rightarrow> s \<Rightarrow> bool"
  for R :: "(s \<Rightarrow> s \<Rightarrow> bool)" where
intro: "\<And> s1 s2. R s1 s2 \<Longrightarrow> closurePred R s1 s2" |
refl: "\<And> s1. closurePred R s1 s1" |
symm: "\<And> s1 s2. closurePred R s1 s2 \<Longrightarrow> closurePred R s2 s1" |
trans: "\<And> s1 s2 s3. \<lbrakk> closurePred R s1 s2
                    ; closurePred R s2 s3 \<rbrakk>
                    \<Longrightarrow> closurePred R s1 s3" |
congJ: "\<And> s1 s2 s3 s4. closurePred R s1 s2 \<and> closurePred R s3 s4 \<Longrightarrow> closurePred R (Join s1 s3) (Join s2 s4)"  |
congM: "\<And> s1 s2 s3 s4. closurePred R s1 s2 \<and> closurePred R s3 s4 \<Longrightarrow> closurePred R (Meet s1 s3) (Meet s2 s4)" |
congI: "\<And> s1 s2 s3 s4. closurePred R s1 s2 \<and> closurePred R s3 s4 \<Longrightarrow> closurePred R (Impl s1 s3) (Impl s2 s4)" |
congP: "\<And> s1 s2 s3 s4. closurePred R s1 s2 \<and> closurePred R s3 s4 \<Longrightarrow> closurePred R (Prod s1 s3) (Prod s2 s4)"

(* congruence laws missing *)


subsection "referencing one equivalence class"

definition classRef :: "s \<Rightarrow> (s \<Rightarrow> bool)" where
"classRef Representative \<equiv> 
  \<lambda>x. closurePred latticeLaws Representative x"

(* gives me the canonical element *)
(* canonElem \<equiv> \<lambda> x. SOME y. closurePred R x y *)
(* isCanonElem  x \<equiv> canonElem x = x*)

(* collection of the canonical elements *)
(* equiClasses C \<equiv>  x. SOME y. closurePred R x y *)


subsection "referencing minimal element of equivalence class"

definition minimalClassElem :: "s \<Rightarrow> s \<Rightarrow> bool" where
"minimalClassElem x \<equiv> \<lambda> min_elem. 
classRef x min_elem \<and> ( \<forall> e. classRef x e \<longrightarrow> min_elem \<le> e )"


(* what was the usage of the choice operator to be used for ... I forgot the detail there ? *)

(* what was the statement about the homomorphism, that must be equal comming from which class of algebras? *)

(* does this work only for infinite lattices ? *)

(*  

type 'a
type m

definition "isMonoid carrier op \<equiv> assoc carrier op"

*)


(* can I encode finitness ? or do I just give a finite amount of "points" into the concrete datatype ? *)




section "OPTION 3: encoding the laws directly into a definition including the refl/sym/trans-closuse"


inductive carrierEQI :: "s \<Rightarrow> s \<Rightarrow> bool" where
(*...*)
assoc: "\<And> s1 s2 s3. carrierEQI (Prod (Prod s1 s2) s3) (Prod s1 (Prod s2 s3))" |
unitl: "\<And> s1. carrierEQI (Prod s1 \<^bold>1\<^sub>s) s1" |
(*unitr: "\<And> s1. carrierEQI s1 (Prod s1 \<^bold>1\<^sub>s)" |*)
sym: "\<And> s1 s2. carrierEQI s1 s2 \<Longrightarrow> carrierEQI s2 s1" |
refll: "\<And> s1 s2. carrierEQI s1 s2 \<Longrightarrow> carrierEQI s1 s1" |
reflr: "\<And> s1 . carrierEQI s1 s1"
(* congruence missing *)


(* is this preferrable for some reason ? *)

(* referencing elements/classes would be the same as in OPTION 2*)





section "OPTION 4: (maybe) 'purest' way to encode the algebra as inductive predicate without Isabelle's 'datatype' command"


(* is this immitating the "datatype" construction from above ? *)
(* or is it even "purer" or preferrable as seen in the other options ? *)


typedecl a
type_synonym point_set = "nat \<Rightarrow> bool"
type_synonym var_set = "nat \<Rightarrow> bool"

consts a_point :: "nat \<Rightarrow> a" ("\<llangle>_\<rrangle>\<^sub>a" 55)
consts a_var :: "nat \<Rightarrow> a" ("\<guillemotleft>_\<guillemotright>\<^sub>a" 55)
consts a_meet :: "a \<Rightarrow> a \<Rightarrow> a" (infixr" \<^bold>\<inter>\<^sub>a " 55)
consts a_join :: "a \<Rightarrow> a \<Rightarrow> a" (infixr "\<^bold>\<union>\<^sub>a" 55)
consts a_prod :: "a \<Rightarrow> a \<Rightarrow> a" (infixr "\<^bold>\<cdot>\<^sub>a" 55)
consts a_impl :: "a \<Rightarrow> a \<Rightarrow> a" (infixr "\<^bold>\<rightarrow>\<^sub>a" 55)
consts a_zero :: a ("\<^bold>0\<^sub>a")
consts a_one :: "a" ("\<^bold>1\<^sub>a")
consts a_bot :: a ("\<^bold>\<bottom>\<^sub>a")
consts a_top :: a ("\<^bold>\<top>\<^sub>a")



inductive carrierALG :: "point_set \<Rightarrow> var_set \<Rightarrow> (a \<Rightarrow> bool)" 
  for p_set :: point_set
  and v_set :: var_set 
where
points: "\<And> p. p_set p \<Longrightarrow> carrierALG p_set v_set (\<llangle>p\<rrangle>\<^sub>a)" |
vars: "\<And> p. v_set p \<Longrightarrow> carrierALG p_set v_set (\<guillemotleft>p\<guillemotright>\<^sub>a)" |
meet: "\<And> s1 s2. carrierALG p_set v_set s1 \<and> carrierALG p_set v_set s2 
            \<Longrightarrow> carrierALG p_set v_set (s1 \<^bold>\<inter>\<^sub>a s2)" |
join: "\<And> s1 s2. carrierALG p_set v_set s1 \<and> carrierALG p_set v_set s2 
            \<Longrightarrow> carrierALG p_set v_set (s1 \<^bold>\<union>\<^sub>a s2)" |
prod: "\<And> s1 s2. carrierALG p_set v_set s1 \<and> carrierALG p_set v_set s2 
            \<Longrightarrow> carrierALG p_set v_set (s1 \<^bold>\<cdot>\<^sub>a s2)" |
impl: "\<And> s1 s2. carrierALG p_set v_set s1 \<and> carrierALG p_set v_set s2 
            \<Longrightarrow> carrierALG p_set v_set (s1 \<^bold>\<rightarrow>\<^sub>a s2)" |
zero: "carrierALG p_set v_set \<^bold>0\<^sub>a" |
one: "carrierALG p_set v_set \<^bold>1\<^sub>a" |
bot: "carrierALG p_set v_set \<^bold>\<bottom>\<^sub>a" |
top: "carrierALG p_set v_set \<^bold>\<top>\<^sub>a" 


(* precising the differences of these induct rules *)
thm "carrierALG.induct"
thm "carrierALG.cases"
thm "s.induct"



type_synonym alg = "a \<Rightarrow> bool"

inductive carrierEQUIV :: "alg \<Rightarrow> a \<Rightarrow> a \<Rightarrow> bool" 
   for ALG :: alg
   where
intro: "\<And> a. ALG a \<Longrightarrow> carrierEQUIV ALG a a" |
symm: "\<And> a1 a2. carrierEQUIV ALG a1 a2 \<Longrightarrow> carrierEQUIV ALG a2 a1" |
trans: "\<And> a1 a2 a3. \<lbrakk> carrierEQUIV ALG a1 a2; carrierEQUIV ALG a2 a3 \<rbrakk> \<Longrightarrow> carrierEQUIV ALG a1 a3" |
assoc: "\<And> a1 a2 a3. carrierEQUIV ALG (a1 \<^bold>\<cdot>\<^sub>a (a2 \<^bold>\<cdot>\<^sub>a a3)) ((a1 \<^bold>\<cdot>\<^sub>a a2) \<^bold>\<cdot>\<^sub>a a3)" |
unitl: "\<And> a. carrierEQUIV ALG (a \<^bold>\<cdot>\<^sub>a \<^bold>1\<^sub>a) a"
 (* ... tbc continued with other rules *)



(* referencing elements/classes would be the same as in OPTION 2*)






section "quotient exercise for Ints from Nats"

definition intRel :: "(nat * nat) => (nat * nat) => bool" where
  "intRel  \<equiv> \<lambda> (x, y) (u, v). (x + v = u + y)"

lemma intRel_iff [simp]: "intRel (x,y) (u,v) \<longleftrightarrow> x + v = u + y"
proof
  show "intRel (x, y) (u, v) \<Longrightarrow> x + v = u + y"
    by (auto simp: intRel_def)
  show "x + v = u + y \<Longrightarrow> intRel (x, y) (u, v)"
    by (auto simp: intRel_def)
qed

quotient_type int = "nat * nat" / "intRel"
  morphisms Rep_Integ Abs_Integ
proof (rule equivpI)
  show "reflp intRel" by (auto simp: reflp_def)
  show "symp intRel" by (auto simp: symp_def)
  show "transp intRel" by (auto simp: transp_def)
qed


find_theorems "Abs_Integ" 
find_theorems name: "Int.plus_int*"

lift_definition int_plus:: "int \<Rightarrow> int \<Rightarrow> int"
  is "\<lambda>(a,b)(c,d). (a+c, b+d)"
  apply  clarify
  by simp

lemma plus_comm: "int_plus x y = int_plus y x"
  apply transfer
  apply clarify
  by (simp add: intrel_def)


end